@startuml
skinparam componentStyle uml2
left to right direction
title Základní datový model pro komunikaci s AMQP

package edeposit.amqp.types {
enum TypeOfSerialization {
     JSON
     BSON
     XML
     Protobuf
}

enum InterfaceOfRequestData {
     antivir.check
     aleph.search
     pdfbox.validate
     pdfbox.validateAndExtractMetadata
     pdfbox.extractMetadata
     epubcheck.validate
     epubcheck.validateAndExtractMetadata
     epubcheck.extractMetadata
}

enum InterfaceOfResponseData {
     antivir.check
     aleph.search
     pdfbox.validate
     pdfbox.validateWithMetadata
     pdfbox.metadata     
     epubcheck.validate
     epubcheck.validateWithMetadata
     epubcheck.metadata     
}
}

interface IMessage {
      String uuid
      String created
      String interface
      String serialization
      Binary data
}

interface IRequest {
}

interface IResponse {
      String uuidOfRequest
}

IMessage <|-right- IRequest
IMessage <|-left- IResponse

package edeposit.amqp.interfaces {
        
        interface IData {
        }       

        interface IDataWithUrl {
              String urlOfFile
        }

        interface IDataWithStream {
              Binary stream
        }

        interface IDataWithValidationResult {
                  Boolean isValid
                  Strings errors
                  String message
        }

        IData <|-right- IDataWithUrl
        IData <|-right- IDataWithStream
        IData <|-right- IDataWithValidationResult
}


IRequest -- IDataWithUrl : < describes an attribute <b>data</b>
IRequest -- IDataWithStream : < describes an attribute <b>data</b>
IRequest -left- TypeOfSerialization : <b>serialization</b> is one of
IRequest -left- InterfaceOfRequestData : <b>interface</b> is one of

IResponse -- IDataWithValidationResult : < describes an attribute <b>data</b>
IResponse -left- TypeOfSerialization : <b>serialization</b> is one of
IResponse -left- InterfaceOfResponseData : <b>interface</b> is one of

package edeposit.amqp.actors {
        interface ISender {
                send(IMessage message)                            
        }
        note bottom
        Sends a given message to <b>message broker</b>. 
        Implementation knows what exchange in <b>message broker</b> uses.
        end note

        
        interface IDataExecutor {
                  result execute(IData data)
        }
        note bottom
        It handles data from <b>Request</b>
        end note

        interface IRequestExecutor {
                  execute(IRequest request)                  
        }
}

@enduml
