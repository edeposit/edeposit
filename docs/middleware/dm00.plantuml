@startuml
skinparam componentStyle uml2
left to right direction
title Základní datový model pro komunikaci s AMQP

package edeposit.amqp.types {
enum ContentType {
     application/json
     application/bson
     text/xml
     application/protobuf
}

enum InterfaceOfData {
     antivir.check
     aleph.search
     pdfbox.validate
     pdfbox.validateAndExtractMetadata
     pdfbox.extractMetadata
     epubcheck.validate
     epubcheck.validateAndExtractMetadata
     epubcheck.extractMetadata
}
}


package edeposit.amqp.interfaces {
Interface IConnectionConfig {
      String url
      ..
      amqp://guest:guest@localhost:5672/vhost/      
      ..
}

Interface IExchangeConfig {
      String name
      String type
      Boolean durable
}

Interface IMessage {
      String replyTo
      String contentType
      String deliveryMode
      String uuid
      String created
      String [] otherValues
      Binary data
}

interface IRequest {
}

interface IResponse {
      String uuidOfRequest
}

IMessage <|-right- IRequest
IMessage <|-left- IResponse
        
        interface IData {
        }       

        interface IDataWithUrl {
              String urlOfFile
        }

        interface IDataWithStream {
              Binary stream
        }

        interface IDataWithValidationResult {
                  Boolean isValid
                  Strings errors
                  String message
        }

        IData <|-right- IDataWithUrl
        IData <|-right- IDataWithStream
        IData <|-right- IDataWithValidationResult
}


IMessage -- IDataWithUrl : < describes an attribute <b>data</b>
IMessage -- IDataWithStream : < describes an attribute <b>data</b>
IMessage -left- ContentType : <b>contentType</b> is one of >
IMessage -left- InterfaceOfData : <b>interface</b> is one of >

IMessage -- IDataWithValidationResult : < describes an attribute <b>data</b>

package edeposit.amqp.actors {
        interface ISender {
                send(IMessage message)                            
        }
        note bottom
        Sends a given message to <b>message broker</b>. 
        Implementation knows what exchange in <b>message broker</b> uses.
        It adapts a message to IMessage type.
        end note
        
        interface IDataExecutor {
                  result execute(IData data)
        }
        note bottom
        It handles data from <b>Request</b>
        end note

        interface IRequestExecutor {
                  execute(IRequest request)                  
        }
}

package edeposit.amqp.serializers {
        interface ISerializer {
                  result serialize()
        }
        note bottom
        It serialize data using standard algorithms. JSON, BSON, protobuf, ...
        end note

        interface IJSONSerializer {
        }       

        interface IBSONSerializer {
        }       

        interface IProtobufSerializer {
        }       
        
        ISerializer <|-- IJSONSerializer
        ISerializer <|-- IBSONSerializer
        ISerializer <|-- IProtobufSerializer
}        
        

@enduml
